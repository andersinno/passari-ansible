- name: Install passari-workflow
  pip:
    chdir: "{{passari_packages_dir}}"
    virtualenv: "{{passari_workflow_venv_dir}}"
    extra_args: "--find-links={{passari_packages_dir}}/wheels"
    requirements: "requirements-workflow.txt"
    virtualenv_command: "{{passari_packages_python_executable}} -m venv"
  become: true
  become_user: "{{passari_user_name}}"
  notify: Apply SELinux context to Passari venv dirs
  tags: [passari-workflow-install, workflow-install, pip-install, install]

- name: Apply SELinux context of venv bin directory
  command: "restorecon -Rv {{passari_workflow_venv_dir}}/bin"
  register: restorecon_result
  changed_when: "restorecon_result.stdout or restorecon_result.stderr"

- name: Add directory for SIP submission key
  file:
    path: "{{dpres_ssh_key_path | dirname}}"
    state: directory
    owner: "{{passari_user_name}}"
    group: "{{passari_user_name}}"
    mode: u=rwx,g=,o=

- name: Add SIP submission SSH key
  copy:
    content: "{{dpres_sip_submit_key}}"
    dest: "{{dpres_ssh_key_path}}"
    owner: "{{passari_user_name}}"
    group: "{{passari_user_name}}"
    mode: u=rw,g=,o=
  notify: Create or update .pub file for SIP submission SSH key
  when: dpres_sip_submit_key is defined and dpres_sip_submit_key

- name: Add SIP signing key
  copy:
    content: "{{dpres_sip_sign_key}}"
    dest: "{{dpres_sip_sign_key_path}}"
    owner: "{{passari_user_name}}"
    group: "{{passari_user_name}}"
    mode: u=rw,g=,o=
  notify: Create or update .pub file for SIP signing key
  when: dpres_sip_sign_key is defined and dpres_sip_sign_key

- name: Create passari configuration directories
  file:
    path: "{{item}}"
    state: directory
    mode: u=rwx,g=rx,o=rx
  loop:
    - "/etc/passari"
    - "/etc/passari-workflow"

- name: Create passari configuration file
  template:
    src: "templates/config/passari.config.toml.j2"
    dest: "/etc/passari/config.toml"
    owner: "{{passari_user_name}}"
    group: "{{passari_user_name}}"
    mode: u=rw,g=r,o=

- name: Create passari-workflow configuration file
  template:
    src: "templates/config/passari-workflow.config.toml.j2"
    dest: "/etc/passari-workflow/config.toml"
    owner: "{{passari_user_name}}"
    group: "{{passari_user_name}}"
    mode: u=rw,g=r,o=

- name: Create workflow object and archive directories
  file:
    path: "{{item}}"
    state: directory
    owner: "{{passari_user_name}}"
    group: "{{passari_user_name}}"
    mode: u=rwx,g=,o=
  loop:
    - "{{passari_workflow_package_dir}}"
    - "{{passari_workflow_archive_dir}}"

- name: Run database migrations
  command: "{{passari_workflow_venv_dir}}/bin/pas-db-migrate upgrade head"
  become: true
  become_user: "{{passari_user_name}}"
  register: migrate_result
  changed_when: "'Running upgrade' in migrate_result.stderr"

- name: Create worker services
  template:
    src: "templates/config/passari-worker-NAME@.service.j2"
    dest: "/etc/systemd/system/passari-worker-{{item}}@.service"
    mode: u=rw,g=r,o=r
  loop: "{{worker_names}}"
  notify: Reload systemd
  tags: workers

- name: Create worker stopper services
  template:
    src: "templates/config/passari-worker-stop-NAME@.service.j2"
    dest: "/etc/systemd/system/passari-worker-stop-{{item}}@.service"
    mode: u=rw,g=r,o=r
  loop:
    - "download_object"
  notify: Reload systemd
  tags: workers

- name: Create worker timers
  template:
    src: "templates/config/passari-worker-{{item.prefix}}NAME@.timer.j2"
    dest: "/etc/systemd/system/passari-worker-{{item.prefix}}{{item.name}}@.timer"
    mode: u=rw,g=r,o=r
  loop:
    - {prefix: "", name: "download_object"}
    - {prefix: "stop-", name: "download_object"}
  notify: Reload systemd
  tags: workers

- name: Create synchronization service files
  template:
    src: "templates/config/{{item}}.service.j2"
    dest: "/etc/systemd/system/{{item}}.service"
    mode: u=rw,g=r,o=r
  loop:
    - "passari-sync-attachments"
    - "passari-sync-objects"
    - "passari-sync-hashes"
    - "passari-sync-processed-sips"
    - "passari-stop-sync-attachments"
    - "passari-stop-sync-objects"
  notify: Reload systemd
  tags: syncers

- name: Create synchronization timer files
  template:
    src: "templates/config/{{item}}.timer.j2"
    dest: "/etc/systemd/system/{{item}}.timer"
    mode: u=rw,g=r,o=r
  loop:
    - "passari-sync-attachments"
    - "passari-sync-objects"
    - "passari-sync-hashes"
    - "passari-sync-processed-sips"
    - "passari-stop-sync-attachments"
    - "passari-stop-sync-objects"
  notify: Reload systemd
  tags: syncers

- name: Trigger handlers to reload systemd (if necessary)
  meta: flush_handlers
  tags: workers, syncers

- name: Enable scheduled running of syncers
  systemd:
    name: "{{item.name}}.timer"
    state: "{{'started' if item.enabled else 'stopped'}}"
    enabled: "{{item.enabled}}"
  loop:
    - name: "passari-sync-objects"
      enabled: "{{enable_sync_objects}}"
    - name: "passari-stop-sync-objects"
      enabled: "{{enable_sync_objects}}"
    - name: "passari-sync-attachments"
      enabled: "{{enable_sync_attachments}}"
    - name: "passari-stop-sync-attachments"
      enabled: "{{enable_sync_attachments}}"
    - name: "passari-sync-hashes"
      enabled: "{{enable_sync_hashes}}"
    - name: "passari-sync-processed-sips"
      enabled: "{{enable_sync_processed_sips}}"
  tags: syncers

- name: Enable and start Passari workers
  systemd_service:
    name: "passari-worker-{{item.0}}@{{item.1}}"
    enabled: "{{ worker_enabled[item.0] and item.1 <= worker_count[item.0] }}"
    state: >-
      {{
        'started' if worker_enabled[item.0] and item.1 <= worker_count[item.0]
        else 'stopped'
      }}
  loop: "{{worker_names | product(range(1, max_workers + 1))}}"
  tags: workers

- name: Enable or disable download-object timers
  systemd:
    name: "passari-worker-{{item.0}}@{{item.1}}.timer"
    enabled: >-
      {{
        enable_scheduled_download_objects
        and item.1 <= worker_count['download_object']
      }}
    state: >-
      {{
        'started'
        if enable_scheduled_download_objects
        and item.1 <= worker_count['download_object']
        else 'stopped'
      }}
  loop: "{{download_worker_timer_names | product(range(1, max_workers + 1))}}"
  tags: workers
